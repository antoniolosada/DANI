// Controlling a servo position using a potentiometer (variable resistor) 
// by Michal Rinott <http://people.interaction-ivrea.it/m.rinott> 

#include <Arduino.h>
#include "pines.h"

#ifndef SAPPO_H
	#include "DANI.h"
	#include "SoftwareServo.h"
	#include <RF24.h>
	#include <RF24_config.h>
	#include <VirtualWire.h>
	#define Servo SoftwareServo

		#include "list.h"
		#include "node_cpp.h"
		#ifndef CODE_LIST
			#include "list.cpp"
			#include "node_cpp.cpp"
		#endif

		#include "SAPPO.h"
#endif
//#include <TimerOne.h>


int MOTOR = LOW;
int VELOCIDAD = 0;

//PINes de los sensores de distancia
byte DistanciaEcho[4] = { 	PIN_ECHO_DIST_DELANTE_1,
							PIN_ECHO_DIST_DELANTE_2,
							PIN_ECHO_DIST_DELANTE_3,
							PIN_ECHO_DIST_ATRAS_1 };

byte DistanciaTriger[4] = { PIN_TRIGGER_DIST_DELANTE_1,
							PIN_TRIGGER_DIST_DELANTE_2,
							PIN_TRIGGER_DIST_DELANTE_3,
							PIN_TRIGGER_DIST_ATRAS_1 };
long DistanciaUs[4] = { 0, 0, 0, 0 };
int DistanciaCm[4] = { 0, 0, 0, 0 };

String Debug = "";
Servo aServo[MAX_SERVOS_POS];
struct sPosServos 
{
  int iValor;
  int iUnidad;
  int iIteraciones;
  int iMaxIteraciones;
  int iValorInicial;
  int iValorFinal;
  byte pin;
  bool Conectado;
  unsigned long ms_desconexion;
  byte iValoIniTemporizado;
  byte iValorFinTemporizado;
  long ms_tiempo_mov;
  long ms_inicial = 0;
  long ms_final = 0;
  bool MovTemporizadoActivo = false;
} aPosServos[MAX_SERVOS_POS];

int iPosCad = 0;
char Cadena[MAX_LON_CADENA];

struct Movimiento 
{
  byte BNumMov;
  int iTiempo;
  int pos[MAX_SERVOS_POS];
};

Movimiento Secuencia[10];

int iPosSec = 0;
int iEstado = STOP;
int iNumSecActiva = SIN_ASIGNAR;
int iNumMovActivo = SIN_ASIGNAR;
int iFinSec = 0;
long ContadorMarcas = 0;

long ContadorMs;

static long timeControlPos = millis();

extern bool ControlPosicionActivo;
extern bool ControlLimitesOffActivo;
extern bool ControlLimitesActivo;

extern int algoKalman;
bool RecuperarPosicion = false;
void InicializarRadio();
void InicializarSAPPO_us();
void CargarDatosBalizas();
bool RecuperarMedidasBalizas(int algoritmo, bool salida);
void InicializarSensorLaser();

/***********************************************************         SETUP          *********************************************************************************************************/

void setup() 
{ 
  int i;
  
  Debug = "I";
  iPosCad = 0;

  ControlPosicionActivo = false;
  ControlLimitesOffActivo = false;
  ControlLimitesActivo = true;

  ContadorMs = millis();

  for (i = 0; i < 4; i++)
  {
	  pinMode(DistanciaEcho[i], INPUT);
	  pinMode(DistanciaTriger[i], OUTPUT);
  }

  //Timer1.initialize(250000);         // Dispara cada 250 ms
  //Timer1.attachInterrupt(ControlLimites); // Activa la interrupcion y la asocia a ISR_Blink
  pinMode(PIN_CONTADOR_VELOCIDAD, INPUT);
  attachInterrupt(digitalPinToInterrupt(PIN_CONTADOR_VELOCIDAD), ContadorVelocidad, CHANGE); //INT4 -> pin 2

  /*Medida de sensores de distancia
  attachInterrupt(2, DistanciaD, FALLING); //INT4 -> pin 21 D
  attachInterrupt(3, DistanciaC, FALLING); //INT4 -> pin 20 C
  attachInterrupt(4, DistanciaI, FALLING); //INT4 -> pin 19 I
  attachInterrupt(5, DistanciaT, FALLING); //INT4 -> pin 18 T*/

  pinMode(PIN_ALIMENTACION_BASE, OUTPUT);
  pinMode(PIN_ALIMENTACION_CUERPO, OUTPUT);
  pinMode(PIN_ALIMENTACION_CABEZA, OUTPUT);
  pinMode(PIN_ALIMENTACION_SAPPO, OUTPUT);

  digitalWrite(PIN_ALIMENTACION_CUERPO, HIGH);
  digitalWrite(PIN_ALIMENTACION_BASE, HIGH);
  digitalWrite(PIN_ALIMENTACION_CABEZA, HIGH);
  digitalWrite(PIN_ALIMENTACION_SAPPO, HIGH);

  pinMode(PIN_SENSOR_LINEA_L, INPUT);
  pinMode(PIN_SENSOR_LINEA_C, INPUT);
  pinMode(PIN_SENSOR_LINEA_R, INPUT);

  Serial.begin(115200);

  int pinServo = 0;
  //Establecer posición inicial de los servos
  for (i = 0; i < MAX_SERVOS_POS; i++)
  {
    aPosServos[i].MovTemporizadoActivo = false;
	pinServo = pin(i);
    if (pinServo > 0)
    {
      aPosServos[i].iIteraciones = 0;
      aPosServos[i].pin = pinServo;
      aPosServos[i].ms_desconexion = millis();

      if (i >= MIN_SERVO_SOLAPADO)
          aPosServos[i].Conectado = false;
      else
      {
          aPosServos[i].Conectado = true;
          aServo[i].attach(pinServo);
      }

}
    else
    {
        aPosServos[i].pin = 0;
        aPosServos[i].Conectado = false;
    }
    aPosServos[i].iValor = 0;
    aPosServos[i].ms_tiempo_mov = 0; //Marca de movimiento programado del servo desactivo
  }
  PosicionInicial();

    /* SAPPO Inicializacion  */
  InicializarRadio();
  InicializarSAPPO_us();
  CargarDatosBalizas();
  InicializarSensorLaser();

  	Serial.print("R->RAM libre: ");
    Serial.print(freeRam());
    Serial.println(";");

    delay(2000);

} 

/***********************************************************         LOOP          *********************************************************************************************************/
int SensorDistancia = 0;
bool ActivarMedirDistancia = true;

void loop() 
{ 
	//return;
	//PruebaMovimientoCabeza();

 SoftwareServo::refresh();

 if (LeerCadena(&iPosCad, Cadena) == LECTURA_FIN)
  {
    ProcesarCadena(Cadena);
    Cadena[0] = 0;
  }
  //MovimientoTemporizado();

  long Tiempo = millis() - ContadorMs;
  if ((Tiempo < 0) || (Tiempo > PERIODO_MEDIDA_DISTANCIA_MS))
  {
	  ComprobarControlColision();
  }

  if (ControlLimitesOffActivo) ControlLimitesArticulacionesApagado(); //Apagado zona de alimentación
  if (ControlLimitesActivo) ControlLimitesArticulaciones(); //Parada servo

  //20 veces por segundo se lanza el control de posiciÃ³n de las articulaciones
  if (millis() - timeControlPos > MS_CONTROL_POS)
  {
	  ActivarMedirDistancia = !ActivarMedirDistancia;
	  if (ActivarMedirDistancia) //10 veces/s
	  { //Reducimos la frecuencia de las medidas (cada una puede tardar 1,4 ms)
		  MedirDistanciaSensor(SensorDistancia);
		  SensorDistancia = (SensorDistancia < MAX_SENSOR_DISTANCIA-1?SensorDistancia++:0);
	  }

	  if (ControlPosicionActivo) ControlPosicion();
      timeControlPos = millis();

      ControlDesconexionServos(); //Desconecta los servos para evitar movimientos y vibraciones
      ControlPosicionamientoServosRot(); //Para el servo rotacional cuando llega a la posición indicada
  }
  ControlMovimientoTemporizado(); //Movimiento suave de servos normales

  return;//*******************************************************************************************

    bool medidas = false;

	if (RecuperarPosicion)
		medidas = RecuperarMedidasBalizas(algoKalman, false);
} 

/***********************************************************         FIN LOOP          ******************************************************************************************************/

void ControlDesconexionServos()
{
	int i = 0;
	int p;

	  for (i = 0; i < MAX_SERVOS_POS; i++)
	  {
		p = pin(i);
	    if (p > 0)
	    {
		  if (aPosServos[i].Conectado)
			  if (aPosServos[i].ms_desconexion < millis())
			  {
				  aServo[i].detach();
				  aPosServos[i].Conectado = false;
			  }
	    }
	  }
}

void MovimientoTemporizado()
{
    switch (iEstado)
    {
        case RUN:
        {
            if (iPosSec > 0) //Solo entramos si hay secuencias
            {
                if (EjecutarSecuencia() == FIN_SECUENCIA)
                {
                    if (CargarSecuencia() == FIN_MOVIMIENTO)
                    {
                        Serial.println(">STOP_FIN");
                        iEstado = STOP;  //Finalizamos el Ãºltimo movimiento de la secuencia
                        iNumSecActiva = SIN_ASIGNAR;
                    }
                }
            }
            break;
        }
    }
    delay(TIEMPO_ITERACION_MS);                           // waits for the servo to get there 
}

void MedirDistanciaSensor(byte sensor)
{
	ContadorMs = millis();

	unsigned int tiempo, distancia;

	digitalWrite(DistanciaTriger[sensor], LOW);
	delayMicroseconds(4);
	digitalWrite(DistanciaTriger[sensor], HIGH);
	delayMicroseconds(12);
	digitalWrite(DistanciaTriger[sensor], LOW);
	// Calcula la distancia midiendo el tiempo del estado alto del pin ECHO
	tiempo = pulseIn(DistanciaEcho[sensor], HIGH, ESPERA_DISTANCIA_uS);
	// La velocidad del sonido es de 340m/s o 29 microsegundos por centimetro
	distancia = tiempo / 58;
	//manda la distancia al monitor serie
	DistanciaCm[sensor] = distancia;
}

void ComprobarControlColision()
{
	int i;
	for (i = 0; i < 4; i++)
		digitalWrite(DistanciaTriger[i], LOW);
	delay(2);
	for (i = 0; i < 4; i++)
	{
		digitalWrite(DistanciaTriger[i], HIGH);
		DistanciaUs[i] = micros();
        if (DistanciaUs[i] < VALOR_COLISION_US)
        {
            //Parar los motores
            ApagadoMotorProgresivo();
            digitalWrite(PIN_ALIMENTACION_BASE, HIGH); //Apagar base
        }
	}
	delay(10);
	for (i = 0; i < 4; i++)
	{
		digitalWrite(DistanciaTriger[i], LOW);
	}

}

void ContadorVelocidad()
{
	ContadorMarcas++;
}

void DistanciaD()
{
	MedirDistancia(SENSOR_DISTANCIA_DERECHA);
}
void DistanciaC()
{
	MedirDistancia(SENSOR_DISTANCIA_CENTRO);
}
void DistanciaI()
{
	MedirDistancia(SENSOR_DISTANCIA_IZQUIERDA);
}
void DistanciaT()
{
	MedirDistancia(SENSOR_DISTANCIA_TRASERA);
}
void MedirDistancia(byte sensord)
{
	if (DistanciaUs[sensord] > 0)
	{
		//double cm = (1.0 * micros() - DistanciaUs[sensord]) * 10 / 292 / 2;
		double cm = (1.0 * micros() - DistanciaUs[sensord]) /58;

		int v = DistanciaCm[sensord];

		if ((cm > VALOR_DISTANCIA_MAX) || (cm < VALOR_DISTANCIA_MIN))
			cm = VALOR_OBJETO_NO_DETECTADO;
		else
		{
			cm = 1.0 * (VALOR_DISTANCIA_CM_MAX - VALOR_DISTANCIA_CM_MIN) / (VALOR_DISTANCIA_MAX - VALOR_DISTANCIA_MIN) * (cm - VALOR_DISTANCIA_MIN) + VALOR_DISTANCIA_CM_MIN;
		}
		DistanciaCm[sensord] = cm;
		DistanciaUs[sensord] = 0;
	}
}

int CargarSecuencia()
{
  int i;
  int iNum;

    if (iNumMovActivo == SIN_ASIGNAR)
      return FIN_MOVIMIENTO;
    else
    {
      if (iNumSecActiva == SIN_ASIGNAR)
      {
        //Recuperamos la primera posiciÃ³n del movimiento
        for (i=0; i<iPosSec; i++)
        {
          if (Secuencia[iNum].BNumMov == iNumMovActivo)
          {
            iNumSecActiva = iNum = i;
            break;
          }
        }
      }
      else
      {
        //Comprobamos que la secuencia sigue perteneciendo al mismo movimiento y no el la Ãºltima
        iNumSecActiva++;
        if ((Secuencia[iNumSecActiva].BNumMov != iNumMovActivo) || (iNumSecActiva >= iPosSec))
        {
          Serial.print(">FIN_MOV-");
          Serial.println(iNumMovActivo);
          iNumMovActivo = SIN_ASIGNAR;
          iNumSecActiva = SIN_ASIGNAR;
          return FIN_MOVIMIENTO;
        }
      }
      Serial.print(">CARGA_SEC-");
      Serial.println(iNumSecActiva);    
      for (i=0; i<22; i++)
      {
        aPosServos[i].iValorInicial = aPosServos[i].iValor;
        aPosServos[i].iValorFinal = Secuencia[iNumSecActiva].pos[i];
        aPosServos[i].iIteraciones = 1;
        //Si el valor del servo no estÃ¡ asignado o no tiene que moverse se colocan a 0 las iteraciones
        if ((aPosServos[i].iValorFinal == SIN_ASIGNAR))
          aPosServos[i].iMaxIteraciones = 0;
        else
          aPosServos[i].iMaxIteraciones = Secuencia[iNumSecActiva].iTiempo/TIEMPO_ITERACION_MS+1;
      }
    }
    return SECUENCIA_EN_PROCESO;
}

int EjecutarSecuencia()
{
  int i;
  int iPos;
  int iCambio = FIN_SECUENCIA;
  //Ejecutamos la iteracciÃ³n de la secuencia actual
  
  if (iNumSecActiva != SIN_ASIGNAR)
  {
      for (i=0; i<22; i++)
      {
        if (aPosServos[i].iIteraciones <= aPosServos[i].iMaxIteraciones)
        {    
          LOG2int("servo->", i+2);
          LOG2int("i->", aPosServos[i].iIteraciones);
          iPos = aPosServos[i].iValorInicial + (aPosServos[i].iValorFinal-aPosServos[i].iValorInicial)*aPosServos[i].iIteraciones/aPosServos[i].iMaxIteraciones;
          LOG2int("vi->", aPosServos[i].iValorInicial);
          LOG2int("vf->", aPosServos[i].iValorFinal);
          LOG2int("p->", iPos);
          aPosServos[i].iIteraciones++;
          AsignarServo(i+2, iPos, aPosServos[i].iUnidad);  
          iCambio = SECUENCIA_EN_PROCESO;
        }
      }
  }   
  return iCambio;
}


void LOG2int(char *c1, int i2)
{
  if (DEBUG)
  {
    Serial.print(c1);
    Serial.println(i2);
  }
}
void LOG2(char *c1, char *c2)
{
  if (DEBUG)
  {
    Serial.print(c1);
    Serial.println(c2);
  }
}
void LOG3(char *c1, char *c2, char *c3)
{
  if (DEBUG)
  {
    Serial.print(c1);
    Serial.print(c2);
    Serial.println(c3);
  }
}

void LOG_DEBUG(char *c1, long l1, long l2, float l3, float l4)
{
    Serial.print("DBG: ");
    Serial.print(c1);
    Serial.print(", ");
    Serial.print(l1);
    Serial.print(", ");
    Serial.print(l2);
    Serial.print(", ");
    Serial.print(l3);
    Serial.print(", ");
    Serial.print(l4);
    Serial.println(";");
}


void PruebaMovimientoCabeza()
{
	for (int i = 0; i < 20; i++)
	{
		int j;
		for (j = 40; j < 100; j++)
		{
			AsignarServo(15, j, 0);
			delay(20);
		}
		delay(2000);
		for (j = 90; j > 40; j--)
		{
			AsignarServo(15, j, 0);
			delay(20);
		}
	}
	return;
}

void DebugInt(int valor, bool concatenar)
{
    char tmp[10];

    itoa(valor, tmp, 10);

    if (concatenar)
        Debug = Debug + tmp;
    else
        Debug = tmp;
}

void DebugChar(char valor, bool concatenar)
{
    char tmp[2];

    tmp[1] = 0;
    tmp[0] = valor;

    if (concatenar)
        Debug = Debug + tmp;
    else
        Debug = tmp;
}

void DebugCadena(String valor, bool concatenar)
{
    if (concatenar)
        Debug = Debug + valor;
    else
        Debug = valor;
}

int freeRam() {
  extern int __heap_start, *__brkval;
  int v;
  return (int)&v - (__brkval == 0 ? (int)&__heap_start : (int)__brkval);
}

